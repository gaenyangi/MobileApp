import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutterpractice/team_member_list.dart';

void main() {
  runApp(
    ChangeNotifierProvider(
      create: (_) => TeamProvider(),
      child: TeamBuildingApp(),
    ),
  );
}

class TeamBuildingApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Team Building App',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  void _showAddMemberDialog(BuildContext context) {
    final teamProvider = Provider.of<TeamProvider>(context, listen: false);

    if (teamProvider.isFull) {
      // Show message if the team is full
      showModalBottomSheet(
        context: context,
        builder: (_) {
          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Center(child: Text("The team is already full")),
          );
        },
      );
    } else {
      showModalBottomSheet(
        context: context,
        isScrollControlled: true,
        builder: (BuildContext context) {
          return Padding(
            padding: EdgeInsets.only(
              bottom: MediaQuery.of(context).viewInsets.bottom,
            ),
            child: AddMemberForm(),
          );
        },
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add Team Member'),
        actions: [
          IconButton(
            icon: Icon(Icons.list),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => TeamMemberListScreen()),
              );
            },
          ),
        ],
      ),
      body: Center(
        child: Consumer<TeamProvider>(
          builder: (context, teamProvider, child) {
            return Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'The number of our team members is: ${teamProvider.teamMembers.length}',
                  style: TextStyle(fontSize: 18),
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () => _showAddMemberDialog(context),
                  child: Text('Add'),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}

class AddMemberForm extends StatefulWidget {
  @override
  _AddMemberFormState createState() => _AddMemberFormState();
}

class _AddMemberFormState extends State<AddMemberForm> {
  final _studentNoController = TextEditingController();
  final _nameController = TextEditingController();

  void _submit(BuildContext context) {
    final studentNo = _studentNoController.text;
    final name = _nameController.text;

    if (studentNo.isNotEmpty && name.isNotEmpty) {
      final teamProvider = Provider.of<TeamProvider>(context, listen: false);
      teamProvider.addMember(TeamMember(name: name, studentNo: studentNo));
      Navigator.pop(context);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Please enter both Student No. and Name")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          TextField(
            controller: _studentNoController,
            decoration: InputDecoration(labelText: 'Student No.'),
            keyboardType: TextInputType.number,
          ),
          TextField(
            controller: _nameController,
            decoration: InputDecoration(labelText: 'Name'),
          ),
          SizedBox(height: 16),
          ElevatedButton(
            onPressed: () => _submit(context),
            child: Text('Enter'),
          ),
        ],
      ),
    );
  }
}

class TeamMemberListScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Team Member List")),
      body: Consumer<TeamProvider>(
        builder: (context, teamProvider, child) {
          return ListView.builder(
            itemCount: teamProvider.teamMembers.length,
            itemBuilder: (context, index) {
              final member = teamProvider.teamMembers[index];
              return Dismissible(
                key: ValueKey(member.studentNo),
                onDismissed: (direction) {
                  teamProvider.removeMember(member);
                },
                background: Container(color: Colors.red),
                child: ListTile(
                  title: Text("${member.name} (${member.studentNo})"),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
