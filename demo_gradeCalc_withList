import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Grade Calculator',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Grade Calculator'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<StudentResult> studentResults = [];

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          backgroundColor: Theme.of(context).colorScheme.inversePrimary,
          title: Text(widget.title),
          bottom: const TabBar(
            tabs: [
              Tab(text: 'Information'),
              Tab(text: 'List'),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            MyForm(
              onStudentResultAdded: (studentResult) {
                setState(() {
                  studentResults.add(studentResult);
                });
              },
            ),
            ResultList(
              studentResults: studentResults,
              onDismissed: (index) {
                setState(() {
                  studentResults.removeAt(index);
                });
              },
              onReorder: (oldIndex, newIndex) {
                setState(() {
                  if (newIndex > oldIndex) {
                    newIndex -= 1;
                  }
                  final StudentResult item = studentResults.removeAt(oldIndex);
                  studentResults.insert(newIndex, item);
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}

class MyForm extends StatefulWidget {
  final Function(StudentResult) onStudentResultAdded;

  const MyForm({Key? key, required this.onStudentResultAdded}) : super(key: key);

  @override
  State<MyForm> createState() => _MyFormState();
}

class _MyFormState extends State<MyForm> {
  final StudentResult studentResult = StudentResult('', 0, 0);
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          const SizedBox(height: 28),
          TextFormField(
            decoration: const InputDecoration(
              border: OutlineInputBorder(),
              labelText: 'Name',
            ),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Insert some strings';
              } else if (int.tryParse(value) != null) {
                return 'Please enter some strings, not a number';
              }
              return null;
            },
            onSaved: (value) {
              studentResult.name = value!;
            },
          ),
          const SizedBox(height: 28),
          TextFormField(
            decoration: const InputDecoration(
              border: OutlineInputBorder(),
              labelText: 'Project points',
            ),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Insert some texts';
              } else if (int.tryParse(value) == null) {
                return 'Insert some integers';
              }
              return null;
            },
            onSaved: (value) {
              studentResult.pp = int.parse(value!);
            },
          ),
          const SizedBox(height: 28),
          DropdownButtonFormField(
            decoration: const InputDecoration(
              border: OutlineInputBorder(),
              labelText: 'Additional point',
            ),
            value: studentResult.ap,
            items: List.generate(11, (i) {
              return DropdownMenuItem(
                value: i,
                child: i == 0
                    ? const Text('Choose the additional point')
                    : Text('${i - 1} point'),
              );
            }),
            onChanged: (value) {
              setState(() {
                studentResult.ap = value!;
              });
            },
            validator: (value) {
              if (value == 0) {
                return 'Please select the point';
              }
              return null;
            },
          ),
          const SizedBox(height: 28),
          Column(
            children: [
              GestureDetector(
                child: Container(
                  width: 400,
                  height: 40,
                  color: Colors.blue,
                  alignment: Alignment.center,
                  child: const Text(
                    "Enter",
                    style: TextStyle(fontSize: 20, color: Colors.white),
                  ),
                ),
                onTap: () {
                  if (_formKey.currentState!.validate()) {
                    _formKey.currentState!.save();
                    widget.onStudentResultAdded(studentResult);
                  }
                },
              ),
            ],
          )
        ],
      ),
    );
  }
}

class ResultList extends StatelessWidget {
  final List<StudentResult> studentResults;
  final Function(int) onDismissed;
  final Function(int, int) onReorder;

  const ResultList({
    Key? key,
    required this.studentResults,
    required this.onDismissed,
    required this.onReorder,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ReorderableListView.builder(
      itemCount: studentResults.length,
      onReorder: onReorder,
      itemBuilder: (context, index) {
        final student = studentResults[index];
        return Dismissible(
          key: ValueKey(index), // Unique key using the index
          onDismissed: (direction) {
            onDismissed(index);
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('${student.name} dismissed'),
              ),
            );
          },
          background: Container(
            color: Colors.red,
            alignment: Alignment.centerLeft,
            padding: const EdgeInsets.only(left: 16.0),
            child: const Icon(Icons.delete, color: Colors.white),
          ),
          child: ListTile(
            title: Text('${student.name}: ${student.pp + student.ap} points'),
          ),
        );
      },
    );
  }
}

class StudentResult {
  String name;
  int pp;
  int ap;

  StudentResult(this.name, this.pp, this.ap);

  @override
  String toString() {
    return '($name, $pp, $ap)';
  }
}
