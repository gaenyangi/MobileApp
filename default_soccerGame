import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Soccer Game',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Soccer Game'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _myscore = 0;
  int _rivalscore=0;
  int _win=0;
  int _draw=0;
  int _lose=0;

  void _incrementMyteam() {
    setState(() {
      _myscore++;
    });
  }

  void _incrementRivalteam() {
    setState(() {
      _rivalscore++;
    });
  }

  void _gameOver(){
    setState((){
      _myscore=0;
      _rivalscore=0;
      if(_myscore>_rivalscore) _win++;
      else if(_myscore<_rivalscore) _lose++;
      else _draw++;
    });
  }

  void _resetGame(){
    setState((){
      _myscore=0;
      _rivalscore=0;
    });
  }

  void _resetAll(){
    setState((){
      _myscore=0;
      _rivalscore=0;
      _win=0;
      _draw=0;
      _lose=0;
    });
  }

  @override
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(

        backgroundColor: Theme.of(context).colorScheme.inversePrimary,

        title: Text(widget.title),
      ),
      body: Center(

        child: Column(

          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Container( // 사진만 덜렁 넣는게 아니라 위젯, 컨테이너 등으로 감싸서 입력
              margin: EdgeInsets.only(bottom: 50.0), // 그 다음 요소와의 거리
              padding: EdgeInsets.all(10.0), // 사진 자체의 경계선
              decoration: BoxDecoration(
                  color:Colors.blue.withOpacity(0.25), //사진에 배경색 넣기
                  borderRadius: BorderRadius.circular(20.0)
              ),
              child: const Image(
                  image: AssetImage(
                      'assets/soccer.png'
                  ),
                  width: 200.0
              ),
            ),
            ElevatedButton(onPressed: _resetGame, child: const Text('Reset Game')), // 각각의 버튼 생성
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly, // 일정한 간격으로 떨어뜨리기
              children: [
                Text('Your Team'),
                Text('Your Rival'),
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly, // 일정한 간격으로 떨어뜨리기
              children: [
                Text(_myscore as String),
                Text(':'),
                Text(_rivalscore as String),
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly, // 일정한 간격으로 떨어뜨리기
              children: [
                ElevatedButton(onPressed: _incrementMyteam, child: const Text('Goal')), // 각각의 버튼 생성
                ElevatedButton(onPressed: _incrementRivalteam, child: const Text('Goal'))
              ],
            ),
            ElevatedButton(onPressed: _gameOver, child: const Text('Game Over')), // 각각의 버튼 생성
            Text('Set Score'),

            Row( // column에서 가로로 형식 추가
              mainAxisAlignment: MainAxisAlignment.spaceEvenly, // 일정한 간격으로 떨어뜨리기
              children: [
                Text('Win : ',semanticsLabel: _win as String),
                Text('Draw : ',semanticsLabel: _draw as String),
                Text('Lose : ',semanticsLabel: _lose as String),
              ],
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _resetAll,
        tooltip: 'Increment',
        child: const Icon(Icons.refresh), // 아이콘 교체
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
