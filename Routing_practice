import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Grade Calculator',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),

      home: const MyHomePage(title: 'Soccer Game'), // 라우팅 스택의 가장 밑, 홈을 본 홈페이지로 설정
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}


class _MyHomePageState extends State<MyHomePage> {
  List items = List.generate(20, (i)=>i);

  @override
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(

        backgroundColor: Theme.of(context).colorScheme.inversePrimary,

        title: const Text('Grade Calculator'),
      ),
      body: const MyForm(),
    );
  }
}

class MyForm extends StatefulWidget{
  const MyForm({Key? key}) : super(key: key);

  @override
  State<MyForm> createState() => _MyFormState();
}

class _MyFormState extends State<MyForm> {
  StudentResult studentResult = StudentResult(0,0,0,0,true);
  final _formKey = GlobalKey<FormState>();
  @override
  Widget build(BuildContext context){
    return Form( // 입력한 값의 validation이 가능하고, 반드시 global key가 포함되어야 함.
        key: _formKey,
        child: ListView(
          children: [
            TextFormField(
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: 'Mid-term exam',
                ),
                validator: (value){
                  if(value==null || value.isEmpty){
                    return 'insert some texts';
                  }else if(int.tryParse(value)==null){
                    return 'Insert some integers';
                  }
                  return null;
                },
                onSaved:(value){
                  studentResult.mid=int.parse(value!);
                }
            ),
            const SizedBox(
              height:28,
            ),
            TextFormField(
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: 'final exam',
                ),
                validator: (value){
                  if(value==null || value.isEmpty){
                    return 'insert some texts';
                  }else if(int.tryParse(value)==null){
                    return 'Insert some integers';
                  }
                  return null;
                },
                onSaved:(value){
                  studentResult.fin=int.parse(value!);
                }
            ),
            const SizedBox(
              height:28,
            ),
            DropdownButtonFormField(
              decoration: const InputDecoration(
                border:  OutlineInputBorder(),
                labelText: 'Additional point',
              ),
              value: studentResult.ap,
              items: List.generate(11, (i) {
                if(i==0){
                  return DropdownMenuItem(
                      value: i-1,
                      child: const Text('Choose the additional point')
                  );
                }
                return DropdownMenuItem(
                    value: i,
                    child: Text('${i-1} point')
                );
              }),
              onChanged: (value){
                setState(() {
                  studentResult.ap=value!;
                });
              },
              validator: (value){
                if(value==0){
                  return 'Please select the point';
                }
                return null;
              },
            ),
            const SizedBox(
              height:28,
            ),
            Column(
              children: [
                RadioListTile(
                  title: const Text('Team Leader(+10)'),
                  value: 10,
                  groupValue: studentResult.tp,
                  onChanged: (value){
                    setState(() {
                      studentResult.tp=value!;
                    });
                  },
                ),
                RadioListTile(
                  title: const Text('Team member'),
                  value: 0,
                  groupValue: studentResult.tp,
                  onChanged: (value){
                    setState(() {
                      studentResult.tp=value!;
                    });
                  },
                ),
                ElevatedButton(
                  child: const Text('Enter'),
                  onPressed: (){
                    setState(() {
                      if(_formKey.currentState!.validate()){
                        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                          content: Text('Processing data'),
                        ));
                        _formKey.currentState!.save();
                        studentResult.computeSum();
                        print(studentResult.toString());
                        Navigator.push(context, MaterialPageRoute( // 앱은 스택형 구조로 새로운 페이지를 push/pop 하는 방식으로 이동한다. 
                            builder: (context) => ResultPage(result: studentResult,) // 따라서 이것과 같이 네비게이터를 이용해 페이지 이동
                          ),
                        );
                      }
                    });
                  },
                )
              ],
            ),

          ],
        )
    )
  }
}

class StudentResult{
  int mid;
  int fin;
  int tp;
  int ap;
  bool att;
  int? totp;

  StudentResult(
      this.mid,
      this.fin,
      this.tp,
      this.ap,
      this.att
      );

  computeSum(){
    if(ap!=-1){
      totp=mid+fin+tp+ap;
      if(!att){
        totp=0;
      }
    }
  }

  @override
  String toString(){
    return '('
        '$mid,'
        '$fin,'
        '$tp,'
        '$ap,'
        '$att)';

  }
}

class ResultPage extends StatelessWidget{
  const ResultPage({Key? key, this.result}) : super(key:key);
  final StudentResult? result; // 값만 전달 받으므로 final 생성

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(

        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: const Text('Result'),
        actions: [
          IconButton(
              onPressed:(){},
              icon: const Icon(Icons.add)
          ),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('Total Sum', style: TextStyle(
              fontSize: 30,
              ),
            ),
            const SizedBox(
              height: 20,
            ),
            Text('${result?.totp}', style: TextStyle(
              fontSize: 50,
              ),
            ),
            const SizedBox(
              height: 20,
            ),
            ElevatedButton(
                onPressed: (){
                  Navigator.pop(context); // 특정 페이지 지정하지 않고 그냥 스택의 맨 위에 것을 pop.
                },
                child: const Text('Insert AGain'),
            )
          ],
        ),
      ),
    );

  }
}
